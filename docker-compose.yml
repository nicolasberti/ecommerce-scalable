version: '3.8'

services:
  mysql:
    image: mysql:latest
    container_name: mysql_ecommerce
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_DATABASE: ecommerce
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - backend

  eureka:
    build:
      context: ./microservice-eureka  # Ruta donde est√° el Dockerfile de Eureka
    container_name: eureka_server
    ports:
      - "8761:8761"
    depends_on:
      - mysql
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
    networks:
      - backend

    mongodb:
     image: mongo:latest
     container_name: mongo_db
     restart: always
     environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: admin
     ports:
      - "27017:27017"
     volumes:
      - mongo_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro 
     networks:
      - backend
      
  redis:
    image: redis:latest
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    networks:
      - backend

  microservice-product-catalog:
    build:
      context: ./microservice-product-catalog  # Ruta del microservicio
    container_name: product_catalog_service
    ports:
      - "8081:8081"
    environment:
     - spring.datasource.url=jdbc:mysql://mysql:3306/ecommerce?useSSL=false&allowPublicKeyRetrieval=true
     - eureka.client.service-url.defaultZone=http://eureka:8761/eureka/
     - spring.redis.host=redis
     - spring.redis.port=6379
     - spring.cache.type=redis
    depends_on:
     - mysql
     - redis
     - eureka
    restart: always
    networks:
      - backend

volumes:
  mysql_data:
    driver: local

networks:
  backend:
    driver: bridge
